/*
 * generated by Xtext 2.31.0
 */
package eu.fbk.se.simpledg.validation;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.validation.Check;

import eu.fbk.se.simpledg.simpleDG.DirectedGraph;
import eu.fbk.se.simpledg.simpleDG.Edge;
import eu.fbk.se.simpledg.simpleDG.EdgeDefinition;
import eu.fbk.se.simpledg.simpleDG.NodeDefinition;
import eu.fbk.se.simpledg.simpleDG.SimpleDGPackage;


/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SimpleDGValidator extends AbstractSimpleDGValidator {
	
	public static final String UNDEFINED_NODE = "Node is not defined: ";

	/**
	 * Check if all the nodes used in the EdgesDefinition are defined in NodesDefinition
	 * @param dg A DirectedGraph object
	 */
	@Check
	public void checkAllNodesDefined(DirectedGraph dg) {
			
		// Get all the defined nodes
		Set<String> nodesList = new HashSet<>();
		EList<NodeDefinition> nodesDefinition = dg.getNodesDefinition();						
		for(NodeDefinition nodeDef : nodesDefinition) {
			 nodesList.add(nodeDef.getNodeName());
		}
		
		// Iterate over edges
		EList<EdgeDefinition> edgesDefinition = dg.getEdgesDefinition();
		for(EdgeDefinition edgeDef : edgesDefinition) {
			
			String source = edgeDef.getEdge().getSource();
			if (! nodesList.contains(source)) {
				error(UNDEFINED_NODE+source,edgeDef, SimpleDGPackage.Literals.EDGE_DEFINITION__EDGE );
				break;
			}

			String target = edgeDef.getEdge().getTarget();
			if (! nodesList.contains(target)) {
				error(UNDEFINED_NODE+target,edgeDef, SimpleDGPackage.Literals.EDGE_DEFINITION__EDGE );
				break;
			}

			
		}
	
	}
	
	
	/**
	 * Check if the node names are unique. 
	 * Duplicated node names are not allowed and the validator has to return an error.
	 * @param dg A DirectGraph object
	 */
	@Check
	public void checkDuplicatedNodes(DirectedGraph dg) {

		Set<String> nodesList = new HashSet<>();
		EList<NodeDefinition> nodesDefinition = dg.getNodesDefinition();
		for(NodeDefinition nodeDef : nodesDefinition) {
			String nodeName = nodeDef.getNodeName();
			if (nodesList.contains(nodeName)) {
				error("Node \"" + nodeName + "\" is duplicated",nodeDef, SimpleDGPackage.Literals.NODE_DEFINITION__NODE_NAME );
				break;
			}
			nodesList.add(nodeName);
		}

	}
	
	
	/**
	 * Check if there are duplicated edges. 
	 * Duplicated edges are not allowed and the validator has to return an error.
	 * @param dg A DirectGraph object
	 */
	@Check
	public void checkDuplicatedEdges(DirectedGraph dg) {

		Set<Pair<String, String>> edgesList = new HashSet<>();

		EList<EdgeDefinition> edgesDefinition = dg.getEdgesDefinition();
		for(EdgeDefinition edgeDef : edgesDefinition) {

			Edge edge = edgeDef.getEdge();
			String source = edge.getSource();
			String target = edge.getTarget();

			Pair<String, String> edgeKey = new Pair<String, String>(source, target);

			if (edgesList.contains(edgeKey)) {
				error("Edge \"" + source + "" + target + "\" is duplicated",edgeDef, SimpleDGPackage.Literals.EDGE_DEFINITION__EDGE );
				break;
			}

			edgesList.add(edgeKey);

		}

	}
	
}
